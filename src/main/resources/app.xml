<?xml version="1.0" encoding="UTF-8"?>
<beans default-autowire="byName"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<context:annotation-config></context:annotation-config>
	<context:component-scan base-package="cn.sz.gl"></context:component-scan>
	
	<mvc:resources location="/js/" mapping="/js/**"></mvc:resources>
	<mvc:resources location="/images/" mapping="/images/**"></mvc:resources>
	<mvc:resources location="/upload/" mapping="/upload/**"></mvc:resources>
	
	
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" >
		<property name="prefix" value="/" ></property>
		<property name="suffix" value=".jsp" ></property>
	</bean>
	
	<!-- 如果只需要引入一个properties文件 -->
	<!-- <context:property-placeholder location="classpath:jdbc.properties" /> -->
	
	<!-- 如果项目中有多个properties文件要引入 -->
	<!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" >
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean> -->
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" >
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" ></property>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:gl" ></property>
		<property name="username" value="zhangsan" ></property>
		<property name="password" value="abc" ></property>
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" >
		<property name="dataSource" ref="dataSource" ></property>
		<!-- 这里是引入mybatis的配置文件 -->
		<property name="configLocation" value="classpath:mybatis_cfg.xml" ></property>
	</bean>


	<!-- 因为我们没有写实现类，所以要由spring帮我们来创建DAO的实现类 -->
	<!-- <bean id="bookdao" class="org.mybatis.spring.mapper.MapperFactoryBean" >
		<property name="sqlSessionFactory" ref="sqlSessionFactory" ></property>
		<property name="mapperInterface" value="cn.sz.gl.dao.IBookDAO" ></property>
	</bean> -->
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" >
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" ></property>
		<property name="basePackage" value="cn.sz.gl.dao" ></property>
	</bean>
	
	<!-- <bean id="li" class="cn.sz.gl.util.LoginIntercepter"></bean> -->
	<!-- 配置拦截器 -->
	<mvc:interceptors>
		<!-- 这里可以直接配置一个bean,表示经过springmvc处理的所有请求，都要经过该拦截器拦截
		<ref bean="li" />
		<bean class="cn.sz.gl.util.LoginIntercepter"></bean>
		这里也可以配置多个拦截器 -->
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<!-- <mvc:exclude-mapping path=""/>表示我不需要拦截的内容 -->
			<bean class="cn.sz.gl.util.LoginIntercepter" ></bean>
		</mvc:interceptor>
		
	</mvc:interceptors>

	<!-- 
		spring中的事务的实现，有两种事务的存在：申明式事务和编程式事务
		开发中主要是用申明式事务
		
		spring中事务管理，可以有两种方式来实现，一种是通过配置文件方式实现，另一种是通过注解来实现
		
		配置文件方式实现事务：
		1.准备事务管理的对象
		2.制定事务管理的规则(比如什么时候回滚，什么时候不会滚；哪个事务只能读，不能改；什么时候需要创建新事务..)
		3.指定事务应用的范围
		
	 -->
	<!-- 准备事务管理对象 -->
	<!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
		<property name="dataSource" ref="dataSource" ></property>
	</bean> -->
	
	<!-- 事务管理规则 -->
	<!-- 
		isolation : 事务的隔离级别
			READ_COMMITTED ： 一个事务修改的数据提交后才能被另外一个事务读取
			READ_UNCOMMITTED : 另外一个事务可以看到这个事务未提交的数据
		
		propagation : 事务的传播属性
			REQUIRED : 如果现在已经有了事务了，那么就直接使用现有的事务；如果现在没有事务，就创建一个新的事务;
			REQUIRES_NEW : 不管现在是否存在事务，都要开启一个新的事务,而原来的事务就先挂起
		
		rollback-for ： 遇到指定的某个异常的时候就回滚
		no-rollback-for  : 遇到指定的某个异常不回滚
		
		read-only : 这个事务是只读事务还是可以修改的事务
		timeout : 表示真个事务允许花费的时间，如果超出了这个设定时间，就回滚,单位为秒
	 -->
	<!-- <tx:advice id="adv" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="buy*"   rollback-for="cn.sz.gl.util.StoreLessException"  />
			<tx:method name="buy*" rollback-for="cn.sz.gl.util.MoneyLessException"/>
			<tx:method name="*" isolation="READ_COMMITTED" read-only="true" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice> -->

	<!-- 指定事务管理范围 -->
	<!-- <aop:config>
		<aop:pointcut expression="execution(* cn.sz.gl.service.IBookService.*(..))" id="bs"/>
		<aop:advisor advice-ref="adv" pointcut-ref="bs"/>
	</aop:config> -->
	
	
	<!-- 通过注解方式实现事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
		<property name="dataSource" ref="dataSource" ></property>
	</bean>
	
	<!-- 指定事务由注解来驱动 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	
	<!-- 准备一个文件上传的操作对象
		这里的id不能叫其他名字
	 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" >
		<property name="defaultEncoding" value="utf-8" ></property>
		<property name="maxUploadSize" value="50000000" ></property>
	</bean>
	
	
	<!--  自定义转换器
		1.准备转换器类，必须实现Converter接口
		2.准备转换服务对象ConversionServiceFactoryBean
			在对象中，注入我们自定义的转换器对象
		3.在MVC注解驱动中，配置自定义的转换服务对象conversionService
	 -->
	<mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>
	<bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
		<property name="converters">
			<list>
				<bean class="cn.sz.gl.util.MyDateConverter"></bean>
			</list>
		</property>
	</bean>
	
	
</beans>
